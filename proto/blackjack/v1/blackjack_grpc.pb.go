// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/blackjack/v1/blackjack.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlackjackService_NewGame_FullMethodName  = "/blackjack.v1.blackjack.BlackjackService/NewGame"
	BlackjackService_GetGame_FullMethodName  = "/blackjack.v1.blackjack.BlackjackService/GetGame"
	BlackjackService_PlayTurn_FullMethodName = "/blackjack.v1.blackjack.BlackjackService/PlayTurn"
)

// BlackjackServiceClient is the client API for BlackjackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackjackServiceClient interface {
	NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*Game, error)
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error)
	PlayTurn(ctx context.Context, in *Turn, opts ...grpc.CallOption) (*Game, error)
}

type blackjackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackjackServiceClient(cc grpc.ClientConnInterface) BlackjackServiceClient {
	return &blackjackServiceClient{cc}
}

func (c *blackjackServiceClient) NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, BlackjackService_NewGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackjackServiceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, BlackjackService_GetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackjackServiceClient) PlayTurn(ctx context.Context, in *Turn, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, BlackjackService_PlayTurn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackjackServiceServer is the server API for BlackjackService service.
// All implementations must embed UnimplementedBlackjackServiceServer
// for forward compatibility.
type BlackjackServiceServer interface {
	NewGame(context.Context, *NewGameRequest) (*Game, error)
	GetGame(context.Context, *GetGameRequest) (*Game, error)
	PlayTurn(context.Context, *Turn) (*Game, error)
	mustEmbedUnimplementedBlackjackServiceServer()
}

// UnimplementedBlackjackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlackjackServiceServer struct{}

func (UnimplementedBlackjackServiceServer) NewGame(context.Context, *NewGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGame not implemented")
}
func (UnimplementedBlackjackServiceServer) GetGame(context.Context, *GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedBlackjackServiceServer) PlayTurn(context.Context, *Turn) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayTurn not implemented")
}
func (UnimplementedBlackjackServiceServer) mustEmbedUnimplementedBlackjackServiceServer() {}
func (UnimplementedBlackjackServiceServer) testEmbeddedByValue()                          {}

// UnsafeBlackjackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackjackServiceServer will
// result in compilation errors.
type UnsafeBlackjackServiceServer interface {
	mustEmbedUnimplementedBlackjackServiceServer()
}

func RegisterBlackjackServiceServer(s grpc.ServiceRegistrar, srv BlackjackServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlackjackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlackjackService_ServiceDesc, srv)
}

func _BlackjackService_NewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackjackServiceServer).NewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackjackService_NewGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackjackServiceServer).NewGame(ctx, req.(*NewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackjackService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackjackServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackjackService_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackjackServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackjackService_PlayTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Turn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackjackServiceServer).PlayTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackjackService_PlayTurn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackjackServiceServer).PlayTurn(ctx, req.(*Turn))
	}
	return interceptor(ctx, in, info, handler)
}

// BlackjackService_ServiceDesc is the grpc.ServiceDesc for BlackjackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackjackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackjack.v1.blackjack.BlackjackService",
	HandlerType: (*BlackjackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGame",
			Handler:    _BlackjackService_NewGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _BlackjackService_GetGame_Handler,
		},
		{
			MethodName: "PlayTurn",
			Handler:    _BlackjackService_PlayTurn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blackjack/v1/blackjack.proto",
}
